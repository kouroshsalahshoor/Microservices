@page "/cart"
@inject ICartService _service
@attribute [Authorize]

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>

@if (_response is not null && _response.Errors.Any())
{
    <Errors Items="_response.Errors" />
}

@if (_loading == true)
{
    <p>loading ...</p>
}
else
{
    @if (_model.CartHeader != null && _model.CartDetails?.Count() > 0)
    {
        <EditForm Model="_model.CartHeader" OnValidSubmit="validSubmit">
            <div class="">
                <div class="card border mt-4 container">
                    <div class="card-header bg-dark text-light ml-0 row ">
                        <div class="col-6">
                            <h3 class="text-success"><i class="bi bi-cart"></i> &nbsp; Shopping Cart</h3>
                        </div>
                        <div class="col-6 text-end">
                            <a href="/" class="btn btn-outline-warning mt-2 btn-sm">Continue Shopping</a>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class=" d-none d-lg-block">
                            <div class="row text-info">
                                <div class="col-lg-2">
                                </div>
                                <div class="col-lg-5">
                                    Product Details
                                </div>
                                <div class="col-lg-2">
                                    Price
                                </div>
                                <div class="col-lg-2">
                                    Count
                                </div>
                                <div class="col-lg-1">
                                </div>
                            </div>
                        </div>
                        <hr />

                        @foreach (var item in _model.CartDetails)
                        {
                            <div class="row h-100">
                                <div class="col-4 col-md-2 text-center py-2">
                                    <img src="@item.Product!.ImageUrl" class="rounded" width="100%" />
                                </div>
                                <div class="col-8 col-md-5">
                                    <h5>@item.Product.Name</h5>
                                    <div style="font-size:11px;">@((MarkupString)item.Product.Description)</div>
                                </div>
                                <div class="col-3 col-md-2 pt-md-4" style="font-size:11px;">
                                    <span style="font-size:17px;">@string.Format("{0:c}", item.Product.Price) </span>
                                </div>
                                <div class="col-3 col-md-2 pt-md-4" style="font-size:11px;">
                                    <span style="font-size:17px;"> @item.Count</span>
                                </div>
                                <div class="col-2 col-lg-1 p-0 pt-lg-4 text-center">
                                    <button class="btn btn-sm btn-danger" @onclick="async () => await remove(item.Id)">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                            </div>
                        }
                        <hr />
                        <div class="row">
                            <div class="col-6">
                                <span>Coupon:</span>
                                @if (string.IsNullOrEmpty(_model.CartHeader.CouponCode))
                                {
                                    <InputText @bind-Value="_model.CartHeader.CouponCode" />
                                    <button class="btn btn-sm btn-success"> Apply </button>
                                }
                                else
                                {
                                    <InputText @bind-Value="_model.CartHeader.CouponCode" disabled />
                                    <button class="btn btn-sm btn-success"> Remove </button>
                                }
                            </div>
                            <div class="col-6 text-end">
                                <span class="text-danger" style="font-size:21px;">  Order Total :  @string.Format("{0:c}", _model.CartHeader.Total)  <br /></span>
                                @if (_model.CartHeader.Discount > 0)
                                {
                                    <span class="text-success"> Order Discount :   @string.Format("{0:c}", _model.CartHeader.Discount) </span>
                                }
                            </div>
                        </div>
                    </div>
                    <div class="card-footer row">
                        <div class="col-6 col-md-3 ">
                            <button class="btn btn-outline-danger form-control">Email Cart</button>
                        </div>
                        <div class="col-6 col-md-3 offset-md-6">
                            <a class="btn btn-success form-control">Looks Good? </a>
                        </div>
                    </div>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div>
            <p>Please add items to cart.</p>
        </div>
    }
}

@code {
    private string _title = "Cart";
    private bool _loading = true;
    private ResponseDto? _response;

    private CartDto? _model = new();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        var authState = await _authStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Claims.Where(x => x.Type.ToLower() == "sub")?.FirstOrDefault()?.Value;
        var userId2 = authState.User.Claims.Where(x => x.Type.ToLower() == JwtRegisteredClaimNames.Sub)?.FirstOrDefault()?.Value;
        var userId3 = authState.User.Claims.Where(x => x.Type.ToLower() == ClaimTypes.Sid)?.FirstOrDefault()?.Value;
        var userId4 = authState.User.Claims.Where(x => x.Type.ToLower() == JwtClaimTypes.Subject)?.FirstOrDefault()?.Value;

        var json = await _js.InvokeAsync<string>("localStorage.getItem", ApplicationConstants.Current_User);
        // UserDto userDto = System.Text.Json.JsonSerializer.Deserialize<UserDto>(json) ?? new();
        UserDto userDto = JsonConvert.DeserializeObject<UserDto>(json) ?? new();

        var response = await _service.Get(userId);
        if (response is not null && response.IsSuccessful)
        {
            _model = JsonConvert.DeserializeObject<CartDto>(Convert.ToString(response.Result)!) ?? new();
        }
        else
        {
            _model = new();
        }

        _loading = false;

    }

    private async Task validSubmit()
    {

    }

    private async Task remove(int id)
    {

    }

}
