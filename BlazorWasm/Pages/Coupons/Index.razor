@page "/coupons"
@inject ICouponService _service

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>

@if (_response is not null && _response.Errors.Any())
{
    <Errors Items="_response.Errors" />
}

@if (_loading == true)
{
    <p>loading ...</p>
}
else
{
    if (_items is not null)
    {
        <table class="table table-striped table-hover">
            <thead>
                <tr>
                    <th scope="col">Id</th>
                    <th scope="col">Code</th>
                    <th scope="col">DiscountAmount</th>
                    <th scope="col">MinAmount</th>
                    <th scope="col" style="width:300px;"><a class="w-100 btn btn-primary" href="coupon/create">Create</a></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in _items)
                {
                    <tr>
                        <th scope="row">@item.Id</th>
                        <td>@item.Code</td>
                        <td>@item.DiscountAmount</td>
                        <td>@item.MinAmount</td>
                        <td>
                            <a class="btn btn-warning float-end m-1" href="coupon/edit/@item.Id">Edit</a>
                            <button class="btn btn-danger float-end m-1" @onclick="@(async () => await delete(item.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private string _title = "Coupons";
    private bool _loading = true;
    private ResponseDto? _response;

    private List<CouponDto>? _items = null;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        await load();
    }

    private async Task load()
    {
        _response = await _service.Get();
        if (_response is not null && _response.IsSuccessful)
        {
            _items = JsonConvert.DeserializeObject<List<CouponDto>>(Convert.ToString(_response.Result)!)!;
        }
        else
        {
            await _js.ToastrError(_response!.Errors.First()); //test it by changing an endpoint route
        }
        _loading = false;
    }

    private async Task delete(int id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure deleting this item"))
        {
            _loading = true;

            _response = await _service.Delete(id);
            if (_response is not null && _response.IsSuccessful)
            {
                await _js.ToastrSuccess("Deleted");
                await load();
            }
            else
            {
                await _js.ToastrError(_response!.Errors.First());
            }
        }
    }
}
