@page "/products"
@inject IProductService _service

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>

@if (_response is not null && _response.Errors.Any())
{
    <Errors Items="_response.Errors" />
}

@if (_loading == true)
{
    <p>loading ...</p>
}
else
{
    if (_items is not null)
    {
        <div class="row">
            @foreach (var item in _items)
            {
                <div class="col-12 col-md-6 col-lg-3">
                    <div class="p-0 my-3 border rounded">
                        <div class="card">
                            <h3 class="card-title text-white-50 text-center py-2">@item.Name</h3>
                            <img src="@item.ImageUrl" class="card-img-top">
                            <div class="card-body">
                                <div class="d-flex justify-content-between py-2">
                                    <span class="text-danger" style="font-size:20px;">@string.Format("{0:c}", item.Price)</span>
                                    <span class="badge bg-warning text-white p-2">@item.Category</span>
                                </div>
                                <p class="card-text">@((MarkupString)item.Description)</p>
                                <div class="row">
                                    <div class="col">
                                        <a href="product/@item.Id" class="btn btn-success form-control">Details</a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private string _title = "Products";
    private bool _loading = true;
    private ResponseDto? _response;

    private List<ProductDto>? _items = null;

    protected override async Task OnInitializedAsync()
    {
        _loading = true;

        await load();
    }

    private async Task load()
    {
        _response = await _service.Get();
        if (_response is not null && _response.IsSuccessful)
        {
            _items = JsonConvert.DeserializeObject<List<ProductDto>>(Convert.ToString(_response.Result)!)!;
        }
        else
        {
            await _js.ToastrError(_response!.Errors.First()); //test it by changing an endpoint route
        }
        _loading = false;
    }

    private async Task delete(int id)
    {
        if (await _js.InvokeAsync<bool>("confirm", "Are you sure deleting this item"))
        {
            _loading = true;

            _response = await _service.Delete(id);
            if (_response is not null && _response.IsSuccessful)
            {
                await _js.ToastrSuccess("Deleted");
                await load();
            }
            else
            {
                await _js.ToastrError(_response!.Errors.First());
            }
        }
    }
}
