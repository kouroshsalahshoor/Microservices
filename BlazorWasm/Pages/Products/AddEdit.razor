@page "/product/create"
@page "/product/edit/{id:int}"

@attribute [Authorize]

@inject IProductService _service

<PageTitle>@_title</PageTitle>

<h1>@_title</h1>

@if (_response is not null && _response.Errors.Any())
{
    <Errors Items="_response.Errors" />
}

<div class="row">
    <EditForm Model="_model" method="post" OnValidSubmit="validSubmit">
        <DataAnnotationsValidator />
        @* <h2>@_title</h2> *@
        <hr />
        <ValidationSummary class="text-danger" role="alert" />

        <div class="form-floating mb-3">
            <InputText @bind-Value="_model.Name" class="form-control" autocomplete="Name" aria-required="true" placeholder="Name" />
            <label for="Name">Name</label>
            <ValidationMessage For="() => _model.Name" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputNumber @bind-Value="_model.Price" class="form-control" autocomplete="Price" aria-required="true" placeholder="Price" />
            <label for="Price">Price</label>
            <ValidationMessage For="() => _model.Price" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText @bind-Value="_model.Category" class="form-control" autocomplete="Category" aria-required="true" placeholder="Category" />
            <label for="Category">Category</label>
            <ValidationMessage For="() => _model.Category" class="text-danger" />
        </div>
        <div class="form-floating mb-3">
            <InputText @bind-Value="_model.Description" class="form-control" autocomplete="Description" aria-required="true" placeholder="Description" />
            <label for="Category">Description</label>
            <ValidationMessage For="() => _model.Description" class="text-danger" />
        </div>

        <button type="submit" class="w-100 btn btn-primary">Submit</button>
        <a class="w-100 btn btn-light mt-3" href="products">Back to list</a>
    </EditForm>
</div>

@code {
    [Parameter] public int Id { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> _authState { get; set; }

    private string _title = "Create Product";
    private bool _loading = true;
    private ResponseDto? _response;

    private ProductDto _model = new();

    protected override async Task OnInitializedAsync()
    {
        // var authState = await _authState;
        // if (authState.User.Claims.Any(x=>x.Type == "role" && x.Value == ApplicationConstants.Role_Admin) == false)
        // {
        //     _navigationManager.NavigateTo("accessdenied");
        // }

        if (Id > 0)
        {
            _title = "Edit product";

            _response = await _service.Get(Id);
            if (_response is not null && _response.IsSuccessful)
            {
                _model = JsonConvert.DeserializeObject<ProductDto>(Convert.ToString(_response.Result)!)!;
            }
            else
            {
                await _js.ToastrError(_response!.Errors.First());
            }
        }
        _loading = false;
    }

    private async Task validSubmit()
    {
        if (Id > 0)
        {
            _response = await _service.Update(_model);
        }
        else
        {
            _response = await _service.Create(_model);
        }

        if (_response is not null && _response.IsSuccessful)
        {
            if (Id > 0)
            {
                await _js.ToastrSuccess("Updated");
            }
            else
            {
                await _js.ToastrSuccess("Created");
            }
            _navigationManager.NavigateTo("products");
        }
        else
        {
            await _js.ToastrError(_response!.Errors.First());
        }
    }
}
