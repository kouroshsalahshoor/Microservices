@page "/product/{id:int}"
@inject IProductService _service
@inject ICartService _cartService
@attribute [Authorize]

<PageTitle>@_title</PageTitle>
<h3>@_title</h3>

@if (_loading)
{
    <p>loading...</p>
}
else
{
    <EditForm Model="_model">
        <DataAnnotationsValidator />
        <div class=" pt-4">
            <div class="card container" style="border:1px solid #808080;">
                <div class="card-header bg-dark text-light row" style="border-radius: 0px;">
                    <div class="col-12 col-md-6">
                        <h1 class="text-white">@_model.Name</h1>
                    </div>
                    <div class="col-12 col-md-6 text-end">
                        <h1 class="text-warning"> @string.Format("{0:c}", _model.Price)</h1>
                    </div>
                </div>
                <div class="card-body">
                    <div class="container rounded p-2">
                        <div class="row">
                            <div class="col-12 col-lg-4 p-1 text-center">
                                <img src="@_model.ImageUrl" style="border-radius:35px;" width="100%" class="rounded" />
                            </div>
                            <div class="col-12 col-lg-8">
                                <div class="row pl-3">

                                    <div class="col-12">
                                        <span class="badge bg-primary text-white p-3 border">@_model.Category</span>
                                        <p class="text-secondary pt-3">@((MarkupString)_model.Description)</p>
                                    </div>
                                </div>
                                <div class="row mx-0">
                                    <InputNumber class="form-control" @bind-Value="_model.Count" />
                                    <ValidationMessage For="() => _model.Count" class="text-danger" />
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-footer row bg-dark">
                    <div class="col-12 col-md-6 pb-1 ">
                        <a class="btn btn-success btn-square form-control btn-lg" style="height:50px;" href="/">Back to List</a>
                    </div>
                    <div class="col-12 col-md-6 ">
                        <button class="btn btn-primary form-control btn-lg" style="height:50px;" @onclick="addToCart">Add to Cart</button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private ProductDto? _model = new();
    private string _title = "Product Details";
    private bool _loading = false;

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        var response = await _service.Get(Id);

        if (response is not null && response.IsSuccessful)
        {
            _model = JsonConvert.DeserializeObject<ProductDto>(Convert.ToString(response.Result)!);
        }
        else
        {
            await _js.InvokeVoidAsync("ShowToastr", "error", response!.Errors.FirstOrDefault());
        }
        _loading = false;

    }

    private async Task addToCart()
    {
        var authState = await _authStateProvider.GetAuthenticationStateAsync();

        var cartDto = new CartDto()
            {
                CartHeader = new CartHeaderDto()
                {
                    UserId = authState.User.Claims.Where(x => x.Type.ToLower() == "sub")?.FirstOrDefault()?.Value
                }
            };

        var cartDetail = new CartDetailDto()
            {
                Count = _model.Count,
                ProductId = _model.Id
            };

        var cartDetails = new List<CartDetailDto>() { cartDetail };

        cartDto.CartDetails = cartDetails;

        var response = await _cartService.AddEdit(cartDto);
        if (response is not null && response.IsSuccessful)
        {
            await _js.ToastrSuccess("Added to Cart");
            _navigationManager.NavigateTo("/");
        }
        else
        {
            await _js.ToastrError(response.Errors.FirstOrDefault()!);
        }
    }
}
